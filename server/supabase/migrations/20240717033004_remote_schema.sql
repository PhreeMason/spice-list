
SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";

COMMENT ON SCHEMA "public" IS 'standard public schema';

CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";

CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";

CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";

CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
BEGIN
  -- First, insert the profile
  INSERT INTO public.profiles (id, full_name, avatar_url, username)
  VALUES (NEW.id, NEW.raw_user_meta_data->>'full_name', NEW.raw_user_meta_data->>'avatar_url', NEW.raw_user_meta_data->>'username');

  -- Then, insert the bookshelves
  INSERT INTO public.bookshelves (user_id, name)
  VALUES
    (NEW.id, 'read'),
    (NEW.id, 'to-read'),
    (NEW.id, 'reading');

  RETURN NEW;
END;
$$;


ALTER FUNCTION "public"."handle_new_user"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";

CREATE TABLE IF NOT EXISTS "public"."authors" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL,
    "url" "text" NOT NULL
);

ALTER TABLE "public"."authors" OWNER TO "postgres";

ALTER TABLE "public"."authors" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."authors_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."book_authors" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "book_id" bigint,
    "author_id" bigint
);

ALTER TABLE "public"."book_authors" OWNER TO "postgres";

ALTER TABLE "public"."book_authors" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."book_authors_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."book_genres" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "genre_id" bigint,
    "book_id" bigint,
    "book_id_genre_id" "text" NOT NULL
);

ALTER TABLE "public"."book_genres" OWNER TO "postgres";

ALTER TABLE "public"."book_genres" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."book_genere_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."book_tags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "book_id" bigint NOT NULL,
    "tag_id" bigint NOT NULL
);

ALTER TABLE "public"."book_tags" OWNER TO "postgres";

ALTER TABLE "public"."book_tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."book_tag_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "authors" "text" NOT NULL,
    "google_rating" integer,
    "series_name" "text",
    "description" "text",
    "google_books_id" "text",
    "google_details_link" "text",
    "publisher" "text",
    "good_reads_description" "text",
    "num_pages" integer,
    "published_date" "text",
    "good_reads_rating" real,
    "good_reads_image_url" "text",
    "good_reads_rating_count" integer,
    "good_reads_book_id" "text",
    "isbn" "text" NOT NULL
);

ALTER TABLE "public"."books" OWNER TO "postgres";

ALTER TABLE "public"."books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."bookshelf_books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_book_id" bigint,
    "bookshelf_id" bigint
);

ALTER TABLE "public"."bookshelf_books" OWNER TO "postgres";

ALTER TABLE "public"."bookshelf_books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."bookshelf_books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."bookshelves" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."bookshelves" OWNER TO "postgres";

ALTER TABLE "public"."bookshelves" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."bookshelves_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."genres" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."genres" OWNER TO "postgres";

ALTER TABLE "public"."genres" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."genres_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "id" "uuid" NOT NULL,
    "updated_at" timestamp with time zone,
    "username" "text",
    "full_name" "text",
    "avatar_url" "text",
    "website" "text",
    CONSTRAINT "username_length" CHECK (("char_length"("username") >= 3))
);

ALTER TABLE "public"."profiles" OWNER TO "postgres";

CREATE TABLE IF NOT EXISTS "public"."tags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);

ALTER TABLE "public"."tags" OWNER TO "postgres";

ALTER TABLE "public"."tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."tags_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_books" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "user_id" "uuid" NOT NULL,
    "book_id" bigint NOT NULL,
    "my_rating" smallint,
    "date_read" "date",
    "date_added" "date",
    "exclusive_shelf" "text" DEFAULT 'to-read'::"text" NOT NULL,
    "read_count" integer,
    "owned_copies" smallint,
    "my_review" "text"
);

ALTER TABLE "public"."user_books" OWNER TO "postgres";

ALTER TABLE "public"."user_books" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_books_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

CREATE TABLE IF NOT EXISTS "public"."user_scans" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "book_id" bigint NOT NULL,
    "user_id" "uuid" NOT NULL
);

ALTER TABLE "public"."user_scans" OWNER TO "postgres";

ALTER TABLE "public"."user_scans" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_scans_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

ALTER TABLE ONLY "public"."authors"
    ADD CONSTRAINT "authors_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."book_authors"
    ADD CONSTRAINT "book_authors_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."book_genres"
    ADD CONSTRAINT "book_genere_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."book_genres"
    ADD CONSTRAINT "book_genres_book_id_genere_id_key" UNIQUE ("book_id_genre_id");

ALTER TABLE ONLY "public"."book_tags"
    ADD CONSTRAINT "book_tag_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_good_reads_book_id_key" UNIQUE ("good_reads_book_id");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_google_books_id_key" UNIQUE ("google_books_id");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_isbn_key" UNIQUE ("isbn");

ALTER TABLE ONLY "public"."books"
    ADD CONSTRAINT "books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."bookshelf_books"
    ADD CONSTRAINT "bookshelf_books_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."bookshelves"
    ADD CONSTRAINT "bookshelves_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."genres"
    ADD CONSTRAINT "genres_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."genres"
    ADD CONSTRAINT "genres_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_username_key" UNIQUE ("username");

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_name_key" UNIQUE ("name");

ALTER TABLE ONLY "public"."tags"
    ADD CONSTRAINT "tags_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."user_books"
    ADD CONSTRAINT "user_books_id_key" UNIQUE ("id");

ALTER TABLE ONLY "public"."user_books"
    ADD CONSTRAINT "user_books_pkey" PRIMARY KEY ("id", "user_id", "book_id");

ALTER TABLE ONLY "public"."user_scans"
    ADD CONSTRAINT "user_scans_pkey" PRIMARY KEY ("id");

ALTER TABLE ONLY "public"."book_authors"
    ADD CONSTRAINT "book_authors_author_id_fkey" FOREIGN KEY ("author_id") REFERENCES "public"."authors"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_authors"
    ADD CONSTRAINT "book_authors_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_genres"
    ADD CONSTRAINT "book_genere_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_genres"
    ADD CONSTRAINT "book_genere_genre_id_fkey" FOREIGN KEY ("genre_id") REFERENCES "public"."genres"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_tags"
    ADD CONSTRAINT "book_tag_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."book_tags"
    ADD CONSTRAINT "book_tag_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."tags"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."bookshelf_books"
    ADD CONSTRAINT "bookshelf_books_bookshelf_id_fkey" FOREIGN KEY ("bookshelf_id") REFERENCES "public"."bookshelves"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."bookshelf_books"
    ADD CONSTRAINT "bookshelf_books_user_book_id_fkey" FOREIGN KEY ("user_book_id") REFERENCES "public"."user_books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."bookshelves"
    ADD CONSTRAINT "bookshelves_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_books"
    ADD CONSTRAINT "user_books_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_books"
    ADD CONSTRAINT "user_books_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_scans"
    ADD CONSTRAINT "user_scans_book_id_fkey" FOREIGN KEY ("book_id") REFERENCES "public"."books"("id") ON UPDATE CASCADE ON DELETE CASCADE;

ALTER TABLE ONLY "public"."user_scans"
    ADD CONSTRAINT "user_scans_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "public"."profiles"("id") ON UPDATE CASCADE ON DELETE CASCADE;

CREATE POLICY "Enable UPDATED for authenticated users only" ON "public"."books" FOR UPDATE TO "authenticated" USING (true);

CREATE POLICY "Enable UPDATED for users based on user_id" ON "public"."user_scans" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));

CREATE POLICY "Enable insert for authenticated users only" ON "public"."book_genres" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."book_tags" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."books" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."genres" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."tags" FOR INSERT TO "authenticated" WITH CHECK (true);

CREATE POLICY "Enable insert for authenticated users only" ON "public"."user_scans" TO "authenticated" USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."book_genres" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."book_tags" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."books" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."genres" FOR SELECT USING (true);

CREATE POLICY "Enable read access for all users" ON "public"."tags" FOR SELECT USING (true);

CREATE POLICY "Public profiles are viewable by everyone." ON "public"."profiles" FOR SELECT USING (true);

CREATE POLICY "Users can insert their own profile." ON "public"."profiles" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "id"));

CREATE POLICY "Users can update own profile." ON "public"."profiles" FOR UPDATE USING ((( SELECT "auth"."uid"() AS "uid") = "id"));

ALTER TABLE "public"."authors" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."book_authors" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."book_genres" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."book_tags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."books" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."bookshelf_books" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."bookshelves" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."genres" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."tags" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_books" ENABLE ROW LEVEL SECURITY;

ALTER TABLE "public"."user_scans" ENABLE ROW LEVEL SECURITY;

ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";

GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";

GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "anon";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."handle_new_user"() TO "service_role";

GRANT ALL ON TABLE "public"."authors" TO "anon";
GRANT ALL ON TABLE "public"."authors" TO "authenticated";
GRANT ALL ON TABLE "public"."authors" TO "service_role";

GRANT ALL ON SEQUENCE "public"."authors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."authors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."authors_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."book_authors" TO "anon";
GRANT ALL ON TABLE "public"."book_authors" TO "authenticated";
GRANT ALL ON TABLE "public"."book_authors" TO "service_role";

GRANT ALL ON SEQUENCE "public"."book_authors_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."book_authors_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."book_authors_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."book_genres" TO "anon";
GRANT ALL ON TABLE "public"."book_genres" TO "authenticated";
GRANT ALL ON TABLE "public"."book_genres" TO "service_role";

GRANT ALL ON SEQUENCE "public"."book_genere_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."book_genere_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."book_genere_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."book_tags" TO "anon";
GRANT ALL ON TABLE "public"."book_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."book_tags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."book_tag_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."book_tag_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."book_tag_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."books" TO "anon";
GRANT ALL ON TABLE "public"."books" TO "authenticated";
GRANT ALL ON TABLE "public"."books" TO "service_role";

GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."books_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."bookshelf_books" TO "anon";
GRANT ALL ON TABLE "public"."bookshelf_books" TO "authenticated";
GRANT ALL ON TABLE "public"."bookshelf_books" TO "service_role";

GRANT ALL ON SEQUENCE "public"."bookshelf_books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bookshelf_books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bookshelf_books_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."bookshelves" TO "anon";
GRANT ALL ON TABLE "public"."bookshelves" TO "authenticated";
GRANT ALL ON TABLE "public"."bookshelves" TO "service_role";

GRANT ALL ON SEQUENCE "public"."bookshelves_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."bookshelves_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."bookshelves_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."genres" TO "anon";
GRANT ALL ON TABLE "public"."genres" TO "authenticated";
GRANT ALL ON TABLE "public"."genres" TO "service_role";

GRANT ALL ON SEQUENCE "public"."genres_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."genres_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."genres_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";

GRANT ALL ON TABLE "public"."tags" TO "anon";
GRANT ALL ON TABLE "public"."tags" TO "authenticated";
GRANT ALL ON TABLE "public"."tags" TO "service_role";

GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."tags_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_books" TO "anon";
GRANT ALL ON TABLE "public"."user_books" TO "authenticated";
GRANT ALL ON TABLE "public"."user_books" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_books_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_books_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_books_id_seq" TO "service_role";

GRANT ALL ON TABLE "public"."user_scans" TO "anon";
GRANT ALL ON TABLE "public"."user_scans" TO "authenticated";
GRANT ALL ON TABLE "public"."user_scans" TO "service_role";

GRANT ALL ON SEQUENCE "public"."user_scans_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_scans_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_scans_id_seq" TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";

ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";

RESET ALL;
